require('dotenv').config();

const { Client, DiscordAPIError, MessageReaction, RichPresenceAssets } = require('discord.js');
const client = new Client();
const PREFIX = "/";
async function vote(addRole, user, member, role) 
{
    const emojis = ['üëç', 'üëé'];
    const channel = client.channels.cache.find(channel => channel.name === "decvotes");
    if (addRole)
    {
        let voteMessage = await channel.send("–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ " + user + " –≤ –£–≤–∞–∂–∞–µ–º—ã–π [24 —á–∞—Å–∞]");
        await voteMessage.react(emojis[0]);
        await voteMessage.react(emojis[1]);
        const filter = (reaction, user) => {
            return ['üëç', 'üëé'].includes(reaction.emoji.name);
            };
        const collected = await voteMessage.awaitReactions(filter, { time:5000 }).catch(console.error);
        console.log(collected);
        reactionNames = collected.map(s => reactionNames = s._emoji.name);
        reactionCount = collected.map(s => reactionCount = s.count);
        console.log(reactionNames + " " + reactionCount);
        if (reactionNames.length === 0)
        {
            channel.send("–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ " + user + " –≤ –£–≤–∞–∂–∞–µ–º—ã–π –Ω–µ —Å–æ—Å—Ç–æ—è–ª–æ—Å—å");
        }
        else if (reactionNames.length === 1)
        {
            if (reactionNames[0] === 'üëç')
            {
                channel.send(user + " –¥–æ–±–∞–≤–ª–µ–Ω –≤ –£–≤–∞–∂–∞–µ–º—ã–π!");
                member.roles.add(role.id);
            }
            else
            {
                channel.send(user + " –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –£–≤–∞–∂–∞–µ–º—ã–π!");
            }
        }
        else if (reactionNames.length === 2)
        {
            if (reactionCount[0] <= reactionCount[1])
            {
                channel.send(user + " –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –£–≤–∞–∂–∞–µ–º—ã–π!");
            }
            else
            {
                channel.send(user + " –¥–æ–±–∞–≤–ª–µ–Ω –≤ –£–≤–∞–∂–∞–µ–º—ã–π!");
                member.roles.add(role.id);
            }
        }
    }
    else
    {
        let voteMessage = await channel.send("–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ —É–¥–∞–ª–µ–Ω–∏–µ " + user + " –∏–∑ –£–≤–∞–∂–∞–µ–º—ã–π [24 —á–∞—Å–∞]");
        await voteMessage.react(emojis[0]);
        await voteMessage.react(emojis[1]);
        const filter = (reaction, user) => {
            return ['üëç', 'üëé'].includes(reaction.emoji.name);
            };
        const collected = await voteMessage.awaitReactions(filter, { time:5000 }).catch(console.error); //86400000
        console.log(collected);
        reactionNames = collected.map(s => reactionNames = s._emoji.name);
        reactionCount = collected.map(s => reactionCount = s.count);
        console.log(reactionNames + " " + reactionCount);
        if (reactionNames.length === 0)
        {
            channel.send("–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ —É–¥–∞–ª–µ–Ω–∏–µ " + user + " –∏–∑ –£–≤–∞–∂–∞–µ–º—ã–π –Ω–µ —Å–æ—Å—Ç–æ—è–ª–æ—Å—å");
        }
        else if (reactionNames.length === 1)
        {
            if (reactionNames[0] === 'üëç')
            {
                channel.send(user + " —É–¥–∞–ª–µ–Ω –∏–∑ –£–≤–∞–∂–∞–µ–º—ã–π!");
                member.roles.remove(role.id);
            }
            else
            {
                channel.send(user + " –æ—Å—Ç–∞–ª—Å—è –≤ –£–≤–∞–∂–∞–µ–º—ã–π!");
            }
        }
        else if (reactionNames.length === 2)
        {
            if (reactionCount[0] >= reactionCount[1])
            {
                channel.send(user + " –æ—Å—Ç–∞–ª—Å—è –≤ –£–≤–∞–∂–∞–µ–º—ã–π!");
            }
            else
            {
                channel.send(user + " —É–¥–∞–ª–µ–Ω –∏–∑ –£–≤–∞–∂–∞–µ–º—ã–π!");
                member.roles.remove(role.id);
            }
        }
    }

}
client.on('message', async message => {
    if (message.author.bot) return;
    if (message.content.startsWith(PREFIX))
    {
        const [CMD_NAME, ... args] = message.content
            .trim()
            .substring(PREFIX.length)
            .split(/\s+/);
        
        if (CMD_NAME === 'roll')
        {
            message.reply(Math.floor(Math.random() * Math.floor(100)));
        }
        if (CMD_NAME === 'rolevote')
        {
            if (message.member.roles.cache.find(r => r.name === "–î–µ—Ü–∏–±–µ–ª") || message.author.id === '379293173039759360')
            {
                if (args.length === 0) return message.reply('–≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π [add, del]');
                let option = args[0];
                if (option === 'add' || option === 'del')
                {
                    if (args.length === 1) return message.reply('–≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Ä–æ–ª–µ–π [uvajaemiy]');
                    let role = message.member.roles.cache.find(r => r.name === "–£–≤–∞–∂–∞–µ–º—ã–π");
                    if (args.length === 2) return message.reply('—É–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è [@...]');
                    var user = message.mentions.members.first();
                    if (user)
                    {
                        const userSet = message.guild.member(user);
                        if (userSet)
                        {
                            var member = message.guild.members.cache.find(member => member.id === userSet.id);
                            if (option === 'add')
                            {
                                if (member.roles.cache.find(r => r.name === "–£–≤–∞–∂–∞–µ–º—ã–π"))
                                {
                                    return message.reply('—É —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å —Ä–æ–ª—å –£–≤–∞–∂–∞–µ–º—ã–π');
                                }
                                vote(true, args[2], member, role);
                            }
                            else
                            {
                                if (!member.roles.cache.find(r => r.name === "–£–≤–∞–∂–∞–µ–º—ã–π"))
                                {
                                    return message.reply('—É —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–∞–∫ –Ω–µ—Ç —Ä–æ–ª–∏ –£–≤–∞–∂–∞–µ–º—ã–π');
                                }
                                vote(false, args[2], member, role);
                            }
                        }
                    }
                    else
                    {
                        return message.reply('—É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                    }
                }
                else
                {
                    return message.reply('–≤—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –æ–ø—Ü–∏—é! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ add –∏–ª–∏ del');
                }
            }
            else
            {
                return message.reply('—É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã!');
            }
        }
    }
});

client.login(process.env.DISCORDJS_BOT_TOKEN);